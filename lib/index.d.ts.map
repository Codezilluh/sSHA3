{"mappings":"AGGA,eAAe;IACd,6CAA6C;IAC7C,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,yCAAyC;IACzC,IAAI,CAAC,EAAE,MAAM,CAAC;CACd,CAAC;AAEF;IAUC;;;;;OAKG;gBACS,IAAI,GAAE,MAAY,EAAE,OAAO,GAAE,OAAY,EAAE,GAAG,UAAQ;IASlE;;;;OAIG;IACH,IAAI,CAAC,KAAK,EAAE,MAAM,GAAG,UAAU,GAAG,MAAM;CAKxC;AAED,iBAAkB,SAAQ,MAAM;IAC/B;;;;OAIG;gBACS,IAAI,GAAE,MAAY,EAAE,OAAO,GAAE,OAAY;CAGrD;AAED,qBAAsB,SAAQ,IAAI;IACjC;;;OAGG;gBACS,OAAO,GAAE,OAAY;CAGjC;AAED,qBAAsB,SAAQ,IAAI;IACjC;;;OAGG;gBACS,OAAO,GAAE,OAAY;CAGjC;AAED,qBAAsB,SAAQ,IAAI;IACjC;;;OAGG;gBACS,OAAO,GAAE,OAAY;CAGjC;AAED,qBAAsB,SAAQ,IAAI;IACjC;;;OAGG;gBACS,OAAO,GAAE,OAAY;CAGjC;AAED,mBAAoB,SAAQ,MAAM;IACjC;;;;OAIG;gBACS,IAAI,GAAE,MAAY,EAAE,OAAO,GAAE,OAAY;CAGrD;AAED,uBAAwB,SAAQ,MAAM;IACrC;;;OAGG;gBACS,OAAO,GAAE,OAAY;CAGjC;AAED,uBAAwB,SAAQ,MAAM;IACrC;;;OAGG;gBACS,OAAO,GAAE,OAAY;CAGjC;AAED,uBAAwB,SAAQ,MAAM;IACrC;;;OAGG;gBACS,OAAO,GAAE,OAAY;CAGjC;AAED,uBAAwB,SAAQ,MAAM;IACrC;;;OAGG;gBACS,OAAO,GAAE,OAAY;CAGjC","sources":["src/src/bitarray.ts","src/src/state.ts","src/src/sponge.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,"import BitArray from \"./bitarray\";\r\nimport sponge from \"./sponge\";\r\n\r\ntype Options = {\r\n\t/** The width of the permutation (in bits) */\r\n\twidth?: number;\r\n\t/** The sponge function rate (in bits) */\r\n\trate?: number;\r\n};\r\n\r\nclass Hasher {\r\n\t/** The width of the permutation (in bits) */\r\n\tprivate width: number;\r\n\t/** The size of the output (in bits) */\r\n\tprivate digestLen: number;\r\n\t/** The sponge function rate (in bits) */\r\n\tprivate rate: number;\r\n\t/** Whether to use SHA3 or default Keccak padding */\r\n\tprivate sha: boolean;\r\n\r\n\t/**\r\n\t * Creates a new Hasher\r\n\t * @param size The size of the output (in bits)\r\n\t * @param options The options for the Hasher\r\n\t * @param sha Whether to use SHA3 padding or not\r\n\t */\r\n\tconstructor(size: number = 512, options: Options = {}, sha = false) {\r\n\t\tthis.digestLen = size;\r\n\t\tthis.width = options.width ?? 1600;\r\n\t\tthis.rate = options.rate ?? this.width - size * 2;\r\n\t\tthis.sha = sha;\r\n\r\n\t\tif (this.rate < 0 || this.rate > this.width) throw new Error(\"Width is not large enough for given rate/size!\");\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the hash of a given value\r\n\t * @param value The value to hash (string or Buffer)\r\n\t * @returns A Buffer representation of the hash result\r\n\t */\r\n\thash(value: string | Uint8Array): Buffer {\r\n\t\tlet string = BitArray.from(value);\r\n\r\n\t\treturn Buffer.from(sponge(string, this.digestLen, this.width, this.rate, this.sha).array);\r\n\t}\r\n}\r\n\r\nexport class SHA3 extends Hasher {\r\n\t/**\r\n\t * Creates a new Hasher using SHA3 padding\r\n\t * @param size The size of the output (in bits)\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(size: number = 512, options: Options = {}) {\r\n\t\tsuper(size, options, true);\r\n\t}\r\n}\r\n\r\nexport class SHA3_224 extends SHA3 {\r\n\t/**\r\n\t * Creates a new 224-bit Hasher using SHA3 padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(224, options);\r\n\t}\r\n}\r\n\r\nexport class SHA3_256 extends SHA3 {\r\n\t/**\r\n\t * Creates a new 256-bit Hasher using SHA3 padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(256, options);\r\n\t}\r\n}\r\n\r\nexport class SHA3_384 extends SHA3 {\r\n\t/**\r\n\t * Creates a new 384-bit Hasher using SHA3 padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(384, options);\r\n\t}\r\n}\r\n\r\nexport class SHA3_512 extends SHA3 {\r\n\t/**\r\n\t * Creates a new 512-bit Hasher using SHA3 padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(512, options);\r\n\t}\r\n}\r\n\r\nexport class Keccak extends Hasher {\r\n\t/**\r\n\t * Creates a new Hasher using Keccak padding\r\n\t * @param size The size of the output (in bits)\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(size: number = 512, options: Options = {}) {\r\n\t\tsuper(size, options, false);\r\n\t}\r\n}\r\n\r\nexport class Keccak_224 extends Keccak {\r\n\t/**\r\n\t * Creates a new 224-bit Hasher using Keccak padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(224, options);\r\n\t}\r\n}\r\n\r\nexport class Keccak_256 extends Keccak {\r\n\t/**\r\n\t * Creates a new 256-bit Hasher using Keccak padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(256, options);\r\n\t}\r\n}\r\n\r\nexport class Keccak_384 extends Keccak {\r\n\t/**\r\n\t * Creates a new 384-bit Hasher using Keccak padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(384, options);\r\n\t}\r\n}\r\n\r\nexport class Keccak_512 extends Keccak {\r\n\t/**\r\n\t * Creates a new 512-bit Hasher using Keccak padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(512, options);\r\n\t}\r\n}\r\n"],"names":[],"version":3,"file":"index.d.ts.map"}