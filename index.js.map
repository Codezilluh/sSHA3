{"mappings":"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","sources":["src/index.ts","src/bitarray.ts","src/sponge.ts","src/state.ts"],"sourcesContent":["import BitArray from \"./bitarray\";\r\nimport sponge from \"./sponge\";\r\n\r\ntype Options = {\r\n\t/** The width of the permutation (in bits) */\r\n\twidth?: number;\r\n\t/** The sponge function rate (in bits) */\r\n\trate?: number;\r\n};\r\n\r\nclass Hasher {\r\n\t/** The width of the permutation (in bits) */\r\n\tprivate width: number;\r\n\t/** The size of the output (in bits) */\r\n\tprivate digestLen: number;\r\n\t/** The sponge function rate (in bits) */\r\n\tprivate rate: number;\r\n\t/** Whether to use SHA3 or default Keccak padding */\r\n\tprivate sha: boolean;\r\n\r\n\t/**\r\n\t * Creates a new Hasher\r\n\t * @param size The size of the output (in bits)\r\n\t * @param options The options for the Hasher\r\n\t * @param sha Whether to use SHA3 padding or not\r\n\t */\r\n\tconstructor(size: number = 512, options: Options = {}, sha = false) {\r\n\t\tthis.digestLen = size;\r\n\t\tthis.width = options.width ?? 1600;\r\n\t\tthis.rate = options.rate ?? this.width - size * 2;\r\n\t\tthis.sha = sha;\r\n\r\n\t\tif (this.rate < 0 || this.rate > this.width) throw new Error(\"Width is not large enough for given rate/size!\");\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the hash of a given value\r\n\t * @param value The value to hash (string or Buffer)\r\n\t * @returns A Buffer representation of the hash result\r\n\t */\r\n\thash(value: string | Uint8Array): Buffer {\r\n\t\tlet string = BitArray.from(value);\r\n\r\n\t\treturn Buffer.from(sponge(string, this.digestLen, this.width, this.rate, this.sha).array);\r\n\t}\r\n}\r\n\r\nexport class SHA3 extends Hasher {\r\n\t/**\r\n\t * Creates a new Hasher using SHA3 padding\r\n\t * @param size The size of the output (in bits)\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(size: number = 512, options: Options = {}) {\r\n\t\tsuper(size, options, true);\r\n\t}\r\n}\r\n\r\nexport class SHA3_224 extends SHA3 {\r\n\t/**\r\n\t * Creates a new 224-bit Hasher using SHA3 padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(224, options);\r\n\t}\r\n}\r\n\r\nexport class SHA3_256 extends SHA3 {\r\n\t/**\r\n\t * Creates a new 256-bit Hasher using SHA3 padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(256, options);\r\n\t}\r\n}\r\n\r\nexport class SHA3_384 extends SHA3 {\r\n\t/**\r\n\t * Creates a new 384-bit Hasher using SHA3 padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(384, options);\r\n\t}\r\n}\r\n\r\nexport class SHA3_512 extends SHA3 {\r\n\t/**\r\n\t * Creates a new 512-bit Hasher using SHA3 padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(512, options);\r\n\t}\r\n}\r\n\r\nexport class Keccak extends Hasher {\r\n\t/**\r\n\t * Creates a new Hasher using Keccak padding\r\n\t * @param size The size of the output (in bits)\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(size: number = 512, options: Options = {}) {\r\n\t\tsuper(size, options, false);\r\n\t}\r\n}\r\n\r\nexport class Keccak_224 extends Keccak {\r\n\t/**\r\n\t * Creates a new 224-bit Hasher using Keccak padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(224, options);\r\n\t}\r\n}\r\n\r\nexport class Keccak_256 extends Keccak {\r\n\t/**\r\n\t * Creates a new 256-bit Hasher using Keccak padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(256, options);\r\n\t}\r\n}\r\n\r\nexport class Keccak_384 extends Keccak {\r\n\t/**\r\n\t * Creates a new 384-bit Hasher using Keccak padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(384, options);\r\n\t}\r\n}\r\n\r\nexport class Keccak_512 extends Keccak {\r\n\t/**\r\n\t * Creates a new 512-bit Hasher using Keccak padding\r\n\t * @param options The options for the hash\r\n\t */\r\n\tconstructor(options: Options = {}) {\r\n\t\tsuper(512, options);\r\n\t}\r\n}\r\n","export default class BitArray {\r\n\tarray: Uint8Array;\r\n\tlength: number;\r\n\r\n\tconstructor(length: number) {\r\n\t\tthis.length = length;\r\n\t\tthis.array = new Uint8Array(Math.ceil(length / 8));\r\n\t}\r\n\r\n\t/**\r\n\t * Performs a concat operation on two BitArrays to make one larger BitArray.\r\n\t * @param A The first BitArray\r\n\t * @param B The second BitArray\r\n\t * @returns A new BitArray\r\n\t */\r\n\tstatic concat(A: BitArray, B: BitArray): BitArray {\r\n\t\tlet C = new BitArray(A.length + B.length);\r\n\r\n\t\tfor (let i = 0; i < A.length; i++) {\r\n\t\t\tC.setBit(i, A.getBit(i));\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < B.length; i++) {\r\n\t\t\tC.setBit(i + A.length, B.getBit(i));\r\n\t\t}\r\n\r\n\t\treturn C;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs a XOR operation on two BitArrays to make a new BitArray.\r\n\t * @param A The first BitArray\r\n\t * @param B The second BitArray\r\n\t * @returns A new BitArray\r\n\t */\r\n\tstatic xor(A: BitArray, B: BitArray): BitArray {\r\n\t\tlet C = new BitArray(Math.min(A.length, B.length));\r\n\r\n\t\tfor (let i = 0; i < C.length; i++) {\r\n\t\t\tC.setBit(i, A.getBit(i) ^ B.getBit(i));\r\n\t\t}\r\n\r\n\t\treturn C;\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a new BitArray from an input string, array of bits, or Uint8Array\r\n\t * @param input The input to generate from\r\n\t * @returns A new BitArray\r\n\t */\r\n\tstatic from(input: string | Uint8Array | number[]): BitArray {\r\n\t\tif (Array.isArray(input)) {\r\n\t\t\tlet out = new BitArray(input.length);\r\n\r\n\t\t\tinput.forEach((bit: number, i: number) => {\r\n\t\t\t\tout.setBit(i, !!bit);\r\n\t\t\t});\r\n\r\n\t\t\treturn out;\r\n\t\t}\r\n\r\n\t\tlet array: Uint8Array;\r\n\r\n\t\tif (input instanceof Uint8Array) {\r\n\t\t\tarray = input;\r\n\t\t} else {\r\n\t\t\tarray = Buffer.from(input, \"utf-8\");\r\n\t\t}\r\n\r\n\t\tlet out = new BitArray(array.length * 8);\r\n\r\n\t\tout.array = array;\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the value of a bit at a given index\r\n\t * @param index The bit index to get\r\n\t * @returns The bit value\r\n\t */\r\n\tgetBit(index: number): number {\r\n\t\tif (index >= this.length) throw new Error(\"Index out of range!\");\r\n\r\n\t\tlet byteIndex = Math.floor(index / 8);\r\n\t\tlet offset = index % 8;\r\n\r\n\t\treturn (this.array[byteIndex] >> offset) & 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value of a bit at a given index\r\n\t * @param index The bit index to set\r\n\t * @param value The bit value\r\n\t */\r\n\tsetBit(index: number, value: number | boolean) {\r\n\t\tif (index >= this.length) throw new Error(\"Index out of range!\");\r\n\r\n\t\tlet byteIndex = Math.floor(index / 8);\r\n\t\tlet offset = index % 8;\r\n\r\n\t\tif (!!value) {\r\n\t\t\tthis.array[byteIndex] |= 1 << offset;\r\n\t\t} else {\r\n\t\t\tthis.array[byteIndex] &= ~(1 << offset);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a new Truncated form of this BitArray\r\n\t * @param length The length to truncate to\r\n\t * @returns A truncated BitArray\r\n\t */\r\n\ttrunc(length: number): BitArray {\r\n\t\tlet out = new BitArray(length);\r\n\r\n\t\tfor (let i = 0; i < Math.min(this.length, length); i++) {\r\n\t\t\tout.setBit(i, this.getBit(i));\r\n\t\t}\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the BitArray to a string\r\n\t * @param encoding The encoding to use\r\n\t * @returns A string\r\n\t */\r\n\ttoString(encoding: \"hex\" | \"utf8\" = \"hex\"): string {\r\n\t\treturn Buffer.from(this.array).toString(encoding);\r\n\t}\r\n}\r\n","import BitArray from \"./bitarray\";\r\nimport { StateArray } from \"./state\";\r\n\r\n/**\r\n * Performs a modulo operation on two numbers\r\n * @param n The dividend\r\n * @param d The divisor\r\n * @returns The result of modulo\r\n */\r\nfunction mod(n: number, d: number) {\r\n\treturn ((n % d) + d) % d;\r\n}\r\n\r\n/**\r\n * XOR each bit in the state with the parities of two columns in the array.\r\n * @param A The state array\r\n * @returns The altered state array\r\n */\r\nfunction theta(A: StateArray): StateArray {\r\n\tconst C = new StateArray(A.size);\r\n\tconst D = new StateArray(A.size);\r\n\tconst out = new StateArray(A.size);\r\n\r\n\tfor (let x = 0; x < 5; x++) {\r\n\t\tfor (let z = 0; z < A.size.w; z++) {\r\n\t\t\tlet value = A.getBit(x, 0, z) ^ A.getBit(x, 1, z) ^ A.getBit(x, 2, z) ^ A.getBit(x, 3, z) ^ A.getBit(x, 4, z);\r\n\r\n\t\t\tC.setBit(x, 0, z, value);\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let x = 0; x < 5; x++) {\r\n\t\tfor (let z = 0; z < A.size.w; z++) {\r\n\t\t\tlet value = C.getBit(mod(x - 1, 5), 0, z) ^ C.getBit(mod(x + 1, 5), 0, mod(z - 1, A.size.w));\r\n\r\n\t\t\tD.setBit(x, 0, z, value);\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let x = 0; x < 5; x++) {\r\n\t\tfor (let y = 0; y < 5; y++) {\r\n\t\t\tfor (let z = 0; z < A.size.w; z++) {\r\n\t\t\t\tlet value = A.getBit(x, y, z) ^ D.getBit(x, 0, z);\r\n\r\n\t\t\t\tout.setBit(x, y, z, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn out;\r\n}\r\n\r\n/**\r\n * Rotate the bits of each lane by a length, called the offset, which depends on the fixed x and y coordinates of the lane.\r\n * @param A The state array\r\n * @returns The altered state array\r\n */\r\nfunction rho(A: StateArray): StateArray {\r\n\tconst out = new StateArray(A.size);\r\n\r\n\tfor (let z = 0; z < A.size.w; z++) {\r\n\t\tlet value = A.getBit(0, 0, z);\r\n\r\n\t\tout.setBit(0, 0, z, value);\r\n\t}\r\n\r\n\tlet x = 1,\r\n\t\ty = 0;\r\n\r\n\tfor (let t = 0; t < 24; t++) {\r\n\t\tfor (let z = 0; z < A.size.w; z++) {\r\n\t\t\tlet value = A.getBit(x, y, mod(z - ((t + 1) * (t + 2)) / 2, A.size.w));\r\n\r\n\t\t\tout.setBit(x, y, z, value);\r\n\t\t}\r\n\r\n\t\t[x, y] = [y, mod(2 * x + 3 * y, 5)];\r\n\t}\r\n\r\n\treturn out;\r\n}\r\n\r\n/**\r\n * Rearrange the positions of the lanes.\r\n * @param A The state array\r\n * @returns The altered state array\r\n */\r\nfunction pi(A: StateArray): StateArray {\r\n\tconst out = new StateArray(A.size);\r\n\r\n\tfor (let x = 0; x < 5; x++) {\r\n\t\tfor (let y = 0; y < 5; y++) {\r\n\t\t\tfor (let z = 0; z < A.size.w; z++) {\r\n\t\t\t\tlet value = A.getBit(mod(x + 3 * y, 5), x, z);\r\n\r\n\t\t\t\tout.setBit(x, y, z, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn out;\r\n}\r\n\r\n/**\r\n * XOR each bit with a non-linear function of two other bits in its row.\r\n * @param A The state array\r\n * @returns The altered state array\r\n */\r\nfunction chi(A: StateArray): StateArray {\r\n\tconst out = new StateArray(A.size);\r\n\r\n\tfor (let x = 0; x < 5; x++) {\r\n\t\tfor (let y = 0; y < 5; y++) {\r\n\t\t\tfor (let z = 0; z < A.size.w; z++) {\r\n\t\t\t\tlet value = A.getBit(x, y, z) ^ ((1 ^ A.getBit(mod(x + 1, 5), y, z)) & A.getBit(mod(x + 2, 5), y, z));\r\n\r\n\t\t\t\tout.setBit(x, y, z, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn out;\r\n}\r\n\r\n/**\r\n * Computes a round constant using a linear feedback shift register.\r\n * @param t An integer\r\n * @returns Generated bit\r\n */\r\nfunction rc(t: number): number {\r\n\tif (mod(t, 255) === 0) return 1;\r\n\r\n\tlet R = 1;\r\n\tfor (let i = 0; i < mod(t, 255); i++) {\r\n\t\tif (R & 0x80) {\r\n\t\t\tR = ((R << 1) ^ 0x71) & 0xff;\r\n\t\t} else {\r\n\t\t\tR <<= 1;\r\n\t\t}\r\n\t}\r\n\r\n\treturn R & 1;\r\n}\r\n\r\n/**\r\n * Modify some of the bits of Lane(0, 0) in a manner that depends on the round index, i.\r\n * @param A The state array\r\n * @param i A round index\r\n * @returns The altered state array\r\n */\r\nfunction iota(A: StateArray, i: number): StateArray {\r\n\tlet out = new StateArray(A.size);\r\n\r\n\tfor (let x = 0; x < 5; x++) {\r\n\t\tfor (let y = 0; y < 5; y++) {\r\n\t\t\tfor (let z = 0; z < A.size.w; z++) {\r\n\t\t\t\tlet value = A.getBit(x, y, z);\r\n\r\n\t\t\t\tout.setBit(x, y, z, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tlet RC = new BitArray(A.size.w);\r\n\r\n\tfor (let j = 0; j <= A.size.l; j++) {\r\n\t\tRC.setBit(Math.pow(2, j) - 1, rc(j + 7 * i));\r\n\t}\r\n\r\n\tfor (let z = 0; z < A.size.w; z++) {\r\n\t\tlet value = out.getBit(0, 0, z) ^ RC.getBit(z);\r\n\r\n\t\tout.setBit(0, 0, z, value);\r\n\t}\r\n\r\n\treturn out;\r\n}\r\n\r\n/**\r\n * Applies the step mappings theta, rho, pi, chi, and iota.\r\n * @param A The state array\r\n * @param i A round index\r\n * @returns The altered state array\r\n */\r\nfunction rnd(A: StateArray, i: number): StateArray {\r\n\treturn iota(chi(pi(rho(theta(A)))), i);\r\n}\r\n\r\n/**\r\n * Applies Keccak permutation to a string\r\n * @param S The string to process\r\n * @param b The length of the string\r\n * @param nr The number of rounds (optional)\r\n * @returns The altered string\r\n */\r\nfunction keccak(S: BitArray, b: number, nr?: number): BitArray {\r\n\tlet A = new StateArray(StateArray.getStateSize(b));\r\n\tlet x = 12 + A.size.l * 2;\r\n\tlet n = nr ?? x;\r\n\r\n\tA.string = S;\r\n\r\n\tfor (let i = x - n; i < x; i++) {\r\n\t\tA = rnd(A, i);\r\n\t}\r\n\r\n\treturn A.string;\r\n}\r\n\r\n/**\r\n * Uses multi-rate padding to generate padding for a BitArray\r\n * @param x Rate\r\n * @param m Bits used\r\n * @param sha Whether to use SHA3 padding or default Keccak padding\r\n * @returns A BitArray\r\n */\r\nfunction pad(x: number, m: number, sha: boolean): BitArray {\r\n\tif (m < 0) throw new Error(\"Integer must not be negative\");\r\n\r\n\tlet headBits = sha ? [0, 1, 1, 0] : [1];\r\n\tlet extraBits = headBits.length + 1;\r\n\tlet j = mod(-m - extraBits, x);\r\n\tlet arr = new BitArray(j + extraBits);\r\n\r\n\theadBits.forEach((bit, i) => {\r\n\t\tarr.setBit(i, !!bit);\r\n\t});\r\n\r\n\tarr.setBit(arr.length - 1, true);\r\n\r\n\treturn arr;\r\n}\r\n\r\n/**\r\n * Absorbs the string and squeezes an output from it\r\n * @param N The input string\r\n * @param d The requested length of output, in bits\r\n * @param b The width of the Keccak permutation\r\n * @param r The sponge rate\r\n * @param sha Whether to use SHA3 padding or default Keccak padding\r\n * @returns A squeezed output\r\n */\r\nexport default function sponge(N: BitArray, d: number, b: number, r: number, sha = false): BitArray {\r\n\tif (d < 0) throw new Error(\"Bit length must not be negative\");\r\n\r\n\tlet P = BitArray.concat(N, pad(r, N.length, sha));\r\n\tlet n = P.length / r;\r\n\tlet c = b - r;\r\n\tlet Ps: BitArray[] = [];\r\n\tlet S = new BitArray(b);\r\n\r\n\tfor (let i = 0; i < n; i++) {\r\n\t\tlet temp = new BitArray(r + c);\r\n\r\n\t\tfor (let k = 0; k < r; k++) {\r\n\t\t\ttemp.setBit(k, P.getBit(i * r + k));\r\n\t\t}\r\n\r\n\t\tPs.push(temp);\r\n\t}\r\n\r\n\tfor (let i = 0; i < n; i++) {\r\n\t\tS = keccak(BitArray.xor(S, Ps[i]), b);\r\n\t}\r\n\r\n\tlet Z = new BitArray(0);\r\n\r\n\twhile (true) {\r\n\t\tZ = BitArray.concat(Z, S.trunc(r));\r\n\r\n\t\tif (d <= Z.length) return Z.trunc(d);\r\n\r\n\t\tS = keccak(S, b);\r\n\t}\r\n}\r\n","import BitArray from \"./bitarray\";\r\n\r\nexport type StateSize = {\r\n\tw: number;\r\n\tl: number;\r\n};\r\n\r\nexport class StateArray {\r\n\t/** The backing byte string for this state array */\r\n\tstring: BitArray;\r\n\t/** The size of the state */\r\n\tsize: StateSize;\r\n\r\n\tconstructor(size: StateSize) {\r\n\t\t// create a \"5-by-5-by-w\" array of bits\r\n\t\tthis.string = new BitArray(size.w * 5 * 5);\r\n\t\tthis.size = size;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the size of a state for a given number of bits\r\n\t * @param b The number of bits\r\n\t * @returns A width and a length\r\n\t */\r\n\tstatic getStateSize(b: number): StateSize {\r\n\t\treturn { w: b / 25, l: Math.log2(b / 25) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a 3d point to an index in the flat bit array\r\n\t * @param x The x position\r\n\t * @param y The y position\r\n\t * @param z The z position\r\n\t * @returns The index of the bit in the array\r\n\t */\r\n\tprivate getBitIndex(x: number, y: number, z: number): number {\r\n\t\treturn this.size.w * (5 * y + x) + z;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of a bit at a given 3d point in the array\r\n\t * @param x The x position\r\n\t * @param y The y position\r\n\t * @param z The z position\r\n\t * @returns The value of the bit\r\n\t */\r\n\tgetBit(x: number, y: number, z: number): number {\r\n\t\tlet bitIndex = this.getBitIndex(x, y, z);\r\n\r\n\t\treturn this.string.getBit(bitIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value of a bit at a given 3d point in the array\r\n\t * @param x The x position\r\n\t * @param y The y position\r\n\t * @param z The z position\r\n\t * @param value The value of the bit\r\n\t */\r\n\tsetBit(x: number, y: number, z: number, value: number | boolean) {\r\n\t\tlet bitIndex = this.getBitIndex(x, y, z);\r\n\r\n\t\tthis.string.setBit(bitIndex, value);\r\n\t}\r\n}\r\n"],"names":[],"version":3,"file":"index.js.map"}